# -*- coding: utf-8 -*-
"""ZS_Challenge_cleaned_predict_category.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ymM1dNnoJ8fCOQozB6VF7n3FitgdL9YD
"""

from nltk.corpus import stopwords
import pandas as pd
import re
from google.colab import drive
drive.mount('/content/drive')

df =pd.read_csv('/content/drive/MyDrive/ZS_Data_Challenge/train.csv')
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.metrics import accuracy_score
import nltk
nltk.download('stopwords')

special_character_remover = re.compile('[/(){}\[\]\|@,;]')
extra_symbol_remover = re.compile('[^0-9a-z #+_]')
STOPWORDS = set(stopwords.words('english'))
def clean_text(text):
    text = text.lower()
    text = special_character_remover.sub(' ', text)
    text = extra_symbol_remover.sub('', text)
    text = ' '.join(word for word in text.split() if word not in STOPWORDS)
    return text

df['job_description'] = df['job_description'].apply(clean_text)

"""***Train and predict for job_category***

**Preparing data for model**
"""

from sklearn.model_selection import train_test_split
X = df.job_description
y = df.category
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state = 42)

X_train.shape,X_test.shape,y_train.shape,y_test.shape

"""**Applying logistic regression**"""

from sklearn.naive_bayes import MultinomialNB


naivebayes = Pipeline([('vect', CountVectorizer()),
               ('tfidf', TfidfTransformer()),
               ('clf', MultinomialNB()),
              ])
naivebayes.fit(X_train, y_train)
#print(naivebayes)

y_pred = naivebayes.predict(X_test)
print(y_pred)

print(f'accuracy {accuracy_score(y_pred,y_test)}')

"""Prepare test dataset"""

df_train =pd.read_csv('/content/drive/MyDrive/ZS_Data_Challenge/test.csv')
df_train['job_description'] = df_train['job_description'].apply(clean_text)
X_test_job_category = df_train.job_description

y_pred_job_category = naivebayes.predict(X_test_job_category)

d = {'job_no' : df_train.job_no, 'job_type_prediction': y_pred_job_category}
newdf = pd.DataFrame(d)
newdf.to_csv('/content/drive/MyDrive/ZS_Data_Challenge/exp_file_category.csv',index=False )